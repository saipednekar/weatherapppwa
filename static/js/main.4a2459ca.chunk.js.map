{"version":3,"sources":["logo.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","city","setCity","axios","require","data","setData","data2","setData2","data3","setData3","data4","setData4","search","a","console","log","get","then","response","location","current","condition","catch","error","Math","floor","random","hits","webformatURL","className","class","onChange","e","target","value","id","type","placeholder","style","borderRadius","position","top","width","onClick","left","src","height","text","name","temp_c","humidity","precip_in","feelslike_c","wind_kph","wind_degree","last_updated","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4a2459ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useState } from \"react\"\r\nfunction App() {\r\n    const [city, setCity] = useState(\"\")\r\n    const axios = require('axios');\r\n    const [data, setData] = useState([])\r\n    const [data2, setData2] = useState([])\r\n    const [data3, setData3] = useState([])\r\n    const [data4, setData4] = useState(\"\")\r\n\r\n    const search = async () => {\r\n        console.log(city)\r\n        // Make a request for a user with a given ID\r\n        axios.get(`https://api.weatherapi.com/v1/current.json?key=cd9fd4e263504efaa18152229212606&q=${city}`)\r\n            .then(function (response) {\r\n                // handle success\r\n                console.log(response);\r\n                setData(response.data.location)\r\n                setData2(response.data.current.condition)\r\n                setData3(response.data.current)\r\n\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n        axios.get(`https://pixabay.com/api/?key=22268105-6a32d9d853b2c66ad24670fac&q=${data4}&image_type=photo`)\r\n            .then(function (response) {\r\n                // handle success\r\n                console.log(response);\r\n\r\n\r\n                if (Math.floor(Math.random() * 10) < 2) {\r\n\r\n                    setData4(response.data.hits[0].webformatURL)\r\n                }\r\n                else if (Math.floor(Math.random() * 10) < 6) {\r\n                    setData4(response.data.hits[5].webformatURL)\r\n                }\r\n                else\r\n                    setData4(response.data.hits[8].webformatURL)\r\n\r\n\r\n\r\n            })\r\n\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"top\" >\r\n\r\n\r\n            <div class=\"container\">\r\n                <div class=\"col-sm-12 col-md-12 col-lg-12 col-12 \">\r\n                    <input class=\"form-control\" onChange={(e) => setCity(e.target.value)} id=\"input\" type=\"text\" placeholder=\"ENTER THE NAME OF A PLACE\" aria-label=\"default input example\" style={{ borderRadius: 150, position: 'absolute', top: 60, width: 290 }} />\r\n                </div>\r\n                <div class=\"col-sm-12 col-md-12 col-lg-12 col-12 \">\r\n                    <button type=\"button\" onClick={() => search()} class=\"btn btn-info\" style={{ borderRadius: 100, position: 'absolute', top: 120, width: 100, left: 120 }} >FIND</button>\r\n                </div>\r\n            </div>\r\n            {city?<div class=\"container\">\r\n                <div class=\"col-sm-12 col-md-12 col-lg-12 col-12 \">\r\n                    <div class=\"card\" style={{ top: 200, position: 'absolute', width: 320, left: 40 }}>\r\n                        <img src={data4} class=\"card-img-top\" style={{ height: 220 }} />\r\n                        <div class=\"card-body\" >\r\n                            <h3 class=\"card-title\">{data2.text} in {data.name} </h3>\r\n                            <h1 class=\"card-title\"> {data3.temp_c} degree Celcius</h1>\r\n                            <h5 class=\"card-title\"> HUMIDITY={data3.humidity}<br />PRECIPITATION={data3.precip_in}inch <br />FEELS LIKE={data3.feelslike_c} Celcius</h5>\r\n                            <p class=\"card-text\">  WINDSPEED={data3.wind_kph}kph  <br />  WINDDEGREE={data3.wind_degree} DEGREE  <br /> UPDATED {data3.last_updated}</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n               : <div></div>}\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}